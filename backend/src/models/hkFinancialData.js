const db = require("../config/database");

class HKFinancialData {
  /**
   * 根据股票代码和报告日期查询财务数据
   * @param {string} securityCode - 股票代码
   * @param {string} reportDate - 报告日期
   * @returns {Promise<Object|null>} 财务数据或null
   */
  static async findByCodeAndDate(securityCode, reportDate) {
    const [rows] = await db.query(
      "SELECT * FROM hk_financial_data WHERE SECURITY_CODE = ? AND REPORT_DATE = ?",
      [securityCode, reportDate]
    );
    return rows[0] || null;
  }

  /**
   * 根据股票代码查询所有财务数据
   * @param {string} securityCode - 股票代码
   * @returns {Promise<Array>} 财务数据数组
   */
  static async findByCode(securityCode) {
    const [rows] = await db.query(
      "SELECT * FROM hk_financial_data WHERE SECURITY_CODE = ? ORDER BY REPORT_DATE DESC",
      [securityCode]
    );
    return rows;
  }

  /**
   * 创建或更新财务数据记录
   * @param {Object} data - 财务数据对象
   * @returns {Promise<number>} 影响的行数
   */
  static async upsert(data) {
    const [result] = await db.query(
      `INSERT INTO hk_financial_data SET ? ON DUPLICATE KEY UPDATE ?`,
      [data, data]
    );
    return result.affectedRows;
  }

  /**
   * 批量创建财务数据记录
   * @param {Array} dataArray - 财务数据数组
   * @returns {Promise<number>} 影响的行数
   */
  static async bulkUpsert(dataArray) {
    if (!dataArray.length) return 0;

    const values = dataArray.map((data) => [
      data.SECURITY_CODE,
      data.SECUCODE,
      data.SECURITY_NAME_ABBR,
      data.ORG_CODE,
      data.REPORT_DATE,
      data.STD_REPORT_DATE,
      data.DATE_TYPE_CODE,
      data.FISCAL_YEAR,
      data.START_DATE,
      data.CURRENCY,
      data.IS_CNY_CODE,
      data.ORG_TYPE,
      data.PER_NETCASH_OPERATE,
      data.PER_OI,
      data.BPS,
      data.BASIC_EPS,
      data.DILUTED_EPS,
      data.OPERATE_INCOME,
      data.OPERATE_INCOME_YOY,
      data.GROSS_PROFIT,
      data.GROSS_PROFIT_YOY,
      data.HOLDER_PROFIT,
      data.HOLDER_PROFIT_YOY,
      data.GROSS_PROFIT_RATIO,
      data.EPS_TTM,
      data.OPERATE_INCOME_QOQ,
      data.NET_PROFIT_RATIO,
      data.ROE_AVG,
      data.GROSS_PROFIT_QOQ,
      data.ROA,
      data.HOLDER_PROFIT_QOQ,
      data.ROE_YEARLY,
      data.ROIC_YEARLY,
      data.TOTAL_ASSETS,
      data.TOTAL_LIABILITIES,
      data.TAX_EBT,
      data.OCF_SALES,
      data.TOTAL_PARENT_EQUITY,
      data.DEBT_ASSET_RATIO,
      data.OPERATE_PROFIT,
      data.PRETAX_PROFIT,
      data.NETCASH_OPERATE,
      data.NETCASH_INVEST,
      data.NETCASH_FINANCE,
      data.END_CASH,
      data.DIVI_RATIO,
      data.DIVIDEND_RATE,
      data.CURRENT_RATIO,
      data.COMMON_ACS,
      data.CURRENTDEBT_DEBT,
      data.ISSUED_COMMON_SHARES,
      data.HK_COMMON_SHARES,
      data.PER_SHARES,
      data.TOTAL_MARKET_CAP,
      data.HKSK_MARKET_CAP,
      data.PE_TTM,
      data.PB_TTM,
      data.REPORT_DATE_SQ,
      data.REPORT_TYPE_SQ,
      data.OPERATE_INCOME_SQ,
      data.DPS_HKD,
      data.OPERATE_INCOME_QOQ_SQ,
      data.NET_PROFIT_RATIO_SQ,
      data.HOLDER_PROFIT_SQ,
      data.HOLDER_PROFIT_QOQ_SQ,
      data.ROE_AVG_SQ,
      data.PE_TTM_SQ,
      data.PB_TTM_SQ,
      data.ROA_SQ,
      data.DPS_HKD_LY,
      data.PREMIUM_INCOME,
      data.PREMIUM_INCOME_YOY,
      data.NET_INTEREST_INCOME,
      data.NET_INTEREST_INCOME_YOY,
      data.FEE_COMMISSION_INCOME,
      data.FEE_COMMISSION_INCOME_YOY,
      data.ACCOUNTS_RECE_TDAYS,
      data.INVENTORY_TDAYS,
      data.CURRENT_ASSETS_TDAYS,
      data.TOTAL_ASSETS_TDAYS,
      data.PREMIUM_EXPENSE,
      data.LOAN_DEPOSIT,
      data.LOAN_EQUITY,
      data.LOAN_ASSETS,
      data.DEPOSIT_EQUITY,
      data.DEPOSIT_ASSETS,
      data.EQUITY_MULTIPLIER,
      data.EQUITY_RATIO,
      data.BALANCE_STD_ITEM_CODE,
      data.BALANCE_STD_ITEM_NAME,
      data.BALANCE_AMOUNT,
      data.INCOME_STD_ITEM_CODE,
      data.INCOME_STD_ITEM_NAME,
      data.INCOME_AMOUNT,
      data.CASHFLOW_STD_ITEM_CODE,
      data.CASHFLOW_STD_ITEM_NAME,
      data.CASHFLOW_AMOUNT,
    ]);

    const [result] = await db.query(
      `INSERT INTO hk_financial_data (
        SECURITY_CODE, SECUCODE, SECURITY_NAME_ABBR, ORG_CODE, REPORT_DATE, STD_REPORT_DATE,
        DATE_TYPE_CODE, FISCAL_YEAR, START_DATE, CURRENCY, IS_CNY_CODE, ORG_TYPE,
        PER_NETCASH_OPERATE, PER_OI, BPS, BASIC_EPS, DILUTED_EPS, OPERATE_INCOME,
        OPERATE_INCOME_YOY, GROSS_PROFIT, GROSS_PROFIT_YOY, HOLDER_PROFIT, HOLDER_PROFIT_YOY,
        GROSS_PROFIT_RATIO, EPS_TTM, OPERATE_INCOME_QOQ, NET_PROFIT_RATIO, ROE_AVG,
        GROSS_PROFIT_QOQ, ROA, HOLDER_PROFIT_QOQ, ROE_YEARLY, ROIC_YEARLY, TOTAL_ASSETS,
        TOTAL_LIABILITIES, TAX_EBT, OCF_SALES, TOTAL_PARENT_EQUITY, DEBT_ASSET_RATIO,
        OPERATE_PROFIT, PRETAX_PROFIT, NETCASH_OPERATE, NETCASH_INVEST, NETCASH_FINANCE,
        END_CASH, DIVI_RATIO, DIVIDEND_RATE, CURRENT_RATIO, COMMON_ACS, CURRENTDEBT_DEBT,
        ISSUED_COMMON_SHARES, HK_COMMON_SHARES, PER_SHARES, TOTAL_MARKET_CAP, HKSK_MARKET_CAP,
        PE_TTM, PB_TTM, REPORT_DATE_SQ, REPORT_TYPE_SQ, OPERATE_INCOME_SQ, DPS_HKD,
        OPERATE_INCOME_QOQ_SQ, NET_PROFIT_RATIO_SQ, HOLDER_PROFIT_SQ, HOLDER_PROFIT_QOQ_SQ,
        ROE_AVG_SQ, PE_TTM_SQ, PB_TTM_SQ, ROA_SQ, DPS_HKD_LY, PREMIUM_INCOME,
        PREMIUM_INCOME_YOY, NET_INTEREST_INCOME, NET_INTEREST_INCOME_YOY, FEE_COMMISSION_INCOME,
        FEE_COMMISSION_INCOME_YOY, ACCOUNTS_RECE_TDAYS, INVENTORY_TDAYS, CURRENT_ASSETS_TDAYS,
        TOTAL_ASSETS_TDAYS, PREMIUM_EXPENSE, LOAN_DEPOSIT, LOAN_EQUITY, LOAN_ASSETS,
        DEPOSIT_EQUITY, DEPOSIT_ASSETS, EQUITY_MULTIPLIER, EQUITY_RATIO,
        BALANCE_STD_ITEM_CODE, BALANCE_STD_ITEM_NAME, BALANCE_AMOUNT,
        INCOME_STD_ITEM_CODE, INCOME_STD_ITEM_NAME, INCOME_AMOUNT,
        CASHFLOW_STD_ITEM_CODE, CASHFLOW_STD_ITEM_NAME, CASHFLOW_AMOUNT
      ) VALUES ? ON DUPLICATE KEY UPDATE
        SECUCODE = VALUES(SECUCODE), SECURITY_NAME_ABBR = VALUES(SECURITY_NAME_ABBR),
        ORG_CODE = VALUES(ORG_CODE), STD_REPORT_DATE = VALUES(STD_REPORT_DATE),
        DATE_TYPE_CODE = VALUES(DATE_TYPE_CODE), FISCAL_YEAR = VALUES(FISCAL_YEAR),
        START_DATE = VALUES(START_DATE), CURRENCY = VALUES(CURRENCY),
        IS_CNY_CODE = VALUES(IS_CNY_CODE), ORG_TYPE = VALUES(ORG_TYPE),
        PER_NETCASH_OPERATE = VALUES(PER_NETCASH_OPERATE), PER_OI = VALUES(PER_OI),
        BPS = VALUES(BPS), BASIC_EPS = VALUES(BASIC_EPS), DILUTED_EPS = VALUES(DILUTED_EPS),
        OPERATE_INCOME = VALUES(OPERATE_INCOME), OPERATE_INCOME_YOY = VALUES(OPERATE_INCOME_YOY),
        GROSS_PROFIT = VALUES(GROSS_PROFIT), GROSS_PROFIT_YOY = VALUES(GROSS_PROFIT_YOY),
        HOLDER_PROFIT = VALUES(HOLDER_PROFIT), HOLDER_PROFIT_YOY = VALUES(HOLDER_PROFIT_YOY),
        GROSS_PROFIT_RATIO = VALUES(GROSS_PROFIT_RATIO), EPS_TTM = VALUES(EPS_TTM),
        OPERATE_INCOME_QOQ = VALUES(OPERATE_INCOME_QOQ), NET_PROFIT_RATIO = VALUES(NET_PROFIT_RATIO),
        ROE_AVG = VALUES(ROE_AVG), GROSS_PROFIT_QOQ = VALUES(GROSS_PROFIT_QOQ),
        ROA = VALUES(ROA), HOLDER_PROFIT_QOQ = VALUES(HOLDER_PROFIT_QOQ),
        ROE_YEARLY = VALUES(ROE_YEARLY), ROIC_YEARLY = VALUES(ROIC_YEARLY),
        TOTAL_ASSETS = VALUES(TOTAL_ASSETS), TOTAL_LIABILITIES = VALUES(TOTAL_LIABILITIES),
        TAX_EBT = VALUES(TAX_EBT), OCF_SALES = VALUES(OCF_SALES),
        TOTAL_PARENT_EQUITY = VALUES(TOTAL_PARENT_EQUITY), DEBT_ASSET_RATIO = VALUES(DEBT_ASSET_RATIO),
        OPERATE_PROFIT = VALUES(OPERATE_PROFIT), PRETAX_PROFIT = VALUES(PRETAX_PROFIT),
        NETCASH_OPERATE = VALUES(NETCASH_OPERATE), NETCASH_INVEST = VALUES(NETCASH_INVEST),
        NETCASH_FINANCE = VALUES(NETCASH_FINANCE), END_CASH = VALUES(END_CASH),
        DIVI_RATIO = VALUES(DIVI_RATIO), DIVIDEND_RATE = VALUES(DIVIDEND_RATE),
        CURRENT_RATIO = VALUES(CURRENT_RATIO), COMMON_ACS = VALUES(COMMON_ACS),
        CURRENTDEBT_DEBT = VALUES(CURRENTDEBT_DEBT), ISSUED_COMMON_SHARES = VALUES(ISSUED_COMMON_SHARES),
        HK_COMMON_SHARES = VALUES(HK_COMMON_SHARES), PER_SHARES = VALUES(PER_SHARES),
        TOTAL_MARKET_CAP = VALUES(TOTAL_MARKET_CAP), HKSK_MARKET_CAP = VALUES(HKSK_MARKET_CAP),
        PE_TTM = VALUES(PE_TTM), PB_TTM = VALUES(PB_TTM), REPORT_DATE_SQ = VALUES(REPORT_DATE_SQ),
        REPORT_TYPE_SQ = VALUES(REPORT_TYPE_SQ), OPERATE_INCOME_SQ = VALUES(OPERATE_INCOME_SQ),
        DPS_HKD = VALUES(DPS_HKD), OPERATE_INCOME_QOQ_SQ = VALUES(OPERATE_INCOME_QOQ_SQ),
        NET_PROFIT_RATIO_SQ = VALUES(NET_PROFIT_RATIO_SQ), HOLDER_PROFIT_SQ = VALUES(HOLDER_PROFIT_SQ),
        HOLDER_PROFIT_QOQ_SQ = VALUES(HOLDER_PROFIT_QOQ_SQ), ROE_AVG_SQ = VALUES(ROE_AVG_SQ),
        PE_TTM_SQ = VALUES(PE_TTM_SQ), PB_TTM_SQ = VALUES(PB_TTM_SQ), ROA_SQ = VALUES(ROA_SQ),
        DPS_HKD_LY = VALUES(DPS_HKD_LY), PREMIUM_INCOME = VALUES(PREMIUM_INCOME),
        PREMIUM_INCOME_YOY = VALUES(PREMIUM_INCOME_YOY), NET_INTEREST_INCOME = VALUES(NET_INTEREST_INCOME),
        NET_INTEREST_INCOME_YOY = VALUES(NET_INTEREST_INCOME_YOY), FEE_COMMISSION_INCOME = VALUES(FEE_COMMISSION_INCOME),
        FEE_COMMISSION_INCOME_YOY = VALUES(FEE_COMMISSION_INCOME_YOY), ACCOUNTS_RECE_TDAYS = VALUES(ACCOUNTS_RECE_TDAYS),
        INVENTORY_TDAYS = VALUES(INVENTORY_TDAYS), CURRENT_ASSETS_TDAYS = VALUES(CURRENT_ASSETS_TDAYS),
        TOTAL_ASSETS_TDAYS = VALUES(TOTAL_ASSETS_TDAYS), PREMIUM_EXPENSE = VALUES(PREMIUM_EXPENSE),
        LOAN_DEPOSIT = VALUES(LOAN_DEPOSIT), LOAN_EQUITY = VALUES(LOAN_EQUITY), LOAN_ASSETS = VALUES(LOAN_ASSETS),
        DEPOSIT_EQUITY = VALUES(DEPOSIT_EQUITY), DEPOSIT_ASSETS = VALUES(DEPOSIT_ASSETS),
        EQUITY_MULTIPLIER = VALUES(EQUITY_MULTIPLIER), EQUITY_RATIO = VALUES(EQUITY_RATIO),
        BALANCE_STD_ITEM_CODE = VALUES(BALANCE_STD_ITEM_CODE), BALANCE_STD_ITEM_NAME = VALUES(BALANCE_STD_ITEM_NAME),
        BALANCE_AMOUNT = VALUES(BALANCE_AMOUNT), INCOME_STD_ITEM_CODE = VALUES(INCOME_STD_ITEM_CODE),
        INCOME_STD_ITEM_NAME = VALUES(INCOME_STD_ITEM_NAME), INCOME_AMOUNT = VALUES(INCOME_AMOUNT),
        CASHFLOW_STD_ITEM_CODE = VALUES(CASHFLOW_STD_ITEM_CODE), CASHFLOW_STD_ITEM_NAME = VALUES(CASHFLOW_STD_ITEM_NAME),
        CASHFLOW_AMOUNT = VALUES(CASHFLOW_AMOUNT), updated_at = CURRENT_TIMESTAMP`,
      [values]
    );
    return result.affectedRows;
  }

  /**
   * 检查指定股票代码和报告日期的数据是否存在
   * @param {string} securityCode - 股票代码
   * @param {string} reportDate - 报告日期
   * @returns {Promise<boolean>} 是否存在
   */
  static async exists(securityCode, reportDate) {
    const [rows] = await db.query(
      "SELECT COUNT(*) as count FROM hk_financial_data WHERE SECURITY_CODE = ? AND REPORT_DATE = ?",
      [securityCode, reportDate]
    );
    return rows[0].count > 0;
  }

  /**
   * 获取指定股票的最新报告日期
   * @param {string} securityCode - 股票代码
   * @returns {Promise<string|null>} 最新报告日期或null
   */
  static async getLatestReportDate(securityCode) {
    const [rows] = await db.query(
      "SELECT MAX(REPORT_DATE) as latest_date FROM hk_financial_data WHERE SECURITY_CODE = ?",
      [securityCode]
    );
    return rows[0].latest_date;
  }
}

module.exports = HKFinancialData;
